{"version":3,"sources":["components/header/header.jsx","components/layout/layout.jsx","config.js","redux/actions/types.js","redux/actions/actions.js","utils/custom-hooks.js","utils/helpers.js","components/control-panel/control-panel.jsx","components/fullscreen-button/fullscreen-button.jsx","components/search-bar/search-bar.jsx","components/list/list.jsx","components/table/table.jsx","components/map/map.jsx","components/chart/chart.jsx","components/spinner/spinner.jsx","components/app/app.jsx","redux/reducers/root-reducer.js","redux/store.js","index.jsx"],"names":["Header","className","href","target","rel","Layout","listContent","mapContent","tableContent","chartContent","Row","Col","xxl","xl","l","md","sm","order","span","config","cases","deaths","recovered","absolute","per100k","total","today","index","unit","period","SET_COVID_DATA","SET_CURRENT_INDEX","SET_CURRENT_UNIT","SET_CURRENT_COUNTRY","SET_CURRENT_PERIOD","setCurrentIndex","type","payload","setCurrentUnit","setCurrentPeriod","useFullscreen","ref","useState","setTarget","useEffect","current","calculateTotal","covidData","reduce","data","getCovidStats","countryData","todayIndex","toUpperCase","slice","result","TypeError","Math","round","population","ControlPanel","values","dispatch","useDispatch","setIndex","action","handleClick","direction","newIndex","length","onClick","FullscreenButton","document","fullscreenElement","fullscreen","setFullscreen","handleFullscreenChange","classList","toggle","addEventListener","removeEventListener","exitFullscreen","catch","error","console","log","message","requestFullscreen","SearchBar","searchQuery","setSearchQuery","empty","setEmpty","placeholder","value","onChange","event","List","query","useSelector","state","currentIndex","currentUnit","currentPeriod","active","setActive","listBlockRef","useRef","fullscreenTarget","handleItemClick","countryObj","country","filter","toLowerCase","search","map","src","countryInfo","flag","alt","iso3","_id","Table","currentCountry","tableBlockRef","colSpan","Map","mapRef","center","setCenter","zoomIn","setZoomIn","mapBlockRef","lat","long","pointToLayer","useCallback","feature","latlng","properties","updated","markerSize","amount","maxRate","ratesAmount","max","i","calculateMarkerSize","html","Date","toLocaleString","L","marker","icon","divIcon","riseOnHover","leafletElement","geoJsonObject","features","geometry","coordinates","geoJson","GeoJSON","addTo","removeFrom","zoom","scrollWheelZoom","TileLayer","url","ChartJS","defaults","color","getComputedStyle","documentElement","getPropertyValue","borderColor","Chart","chartBlockRef","labels","datasets","backgroundColor","borderWidth","Spinner","App","loaded","setLoaded","a","axios","get","response","fetchData","then","setCovidData","initialState","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cdfae2cc.chunk.js","sourcesContent":["import './header.css';\n\nexport const Header = () => {\n  return (\n    <header className='header'>\n      <div className='logo'>\n        <h1 className='title'>\n          <div>Covid-19</div>\n          <div>Dashboard</div>\n        </h1>\n        <i className='fas fa-viruses' />\n      </div>\n      <a\n        href='https://github.com/odil-abdulloyev/covid19-dashboard'\n        target='_blank'\n        rel='noreferrer'\n        className='github'\n      >\n        <i className='fab fa-github' />\n      </a>\n    </header>\n  );\n};\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../header/header';\nimport './layout.css';\n\nexport const Layout = ({\n  listContent = null,\n  mapContent = null,\n  tableContent = null,\n  chartContent = null\n}) => {\n  return (\n    <>\n      <Header />\n      <Row>\n        <Col\n          xxl={3}\n          xl={3}\n          l={3}\n          md={3}\n          sm={{ order: 1, span: 5 }}\n          className='list-container'\n        >\n          {listContent}\n        </Col>\n        <Col\n          xxl={{ order: 1, span: 5 }}\n          xl={{ order: 1, span: 5 }}\n          l={{ order: 1, span: 5 }}\n          md={{ order: 1, span: 5 }}\n          sm={{ order: -1, span: 12 }}\n          className='map-container'\n        >\n          {mapContent}\n        </Col>\n        <Col\n          xxl={4}\n          xl={4}\n          l={4}\n          md={4}\n          sm={{ order: 2, span: 7 }}\n          className='table-chart-container'\n        >\n          <Row>\n            <Col xxl={12} xl={12} l={12} className='table-container'>\n              {tableContent}\n            </Col>\n          </Row>\n          <Row>\n            <Col xxl={12} xl={12} l={12} className='chart-container'>\n              {chartContent}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","export const config = {\n  apiUrl: 'https://corona.lmao.ninja/v2/countries',\n  mapTileLayerUrl:\n    'https://api.mapbox.com/styles/v1/j0hn-d03/ckrx3ina30ihn18p683g9oyn1/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiajBobi1kMDMiLCJhIjoiY2tyeDJ1d2IyMDUzNjJvbXJjaTVuNjR1biJ9.zspgA8Q6Df0zjna6OS4QJg',\n  index: {\n    cases: 'cases',\n    deaths: 'deaths',\n    recovered: 'recovered'\n  },\n  unit: {\n    absolute: 'absolute',\n    per100k: 'per 100k population'\n  },\n  period: {\n    total: 'total',\n    today: 'today'\n  },\n  target: {\n    index: 'index',\n    unit: 'unit',\n    period: 'period'\n  }\n};\n","export const SET_COVID_DATA = 'SET_COVID_DATA';\nexport const SET_CURRENT_INDEX = 'SET_CURRENT_INDEX';\nexport const SET_CURRENT_UNIT = 'SET_CURRENT_UNIT';\nexport const SET_CURRENT_COUNTRY = 'SET_CURRENT_COUNTRY';\nexport const SET_CURRENT_PERIOD = 'SET_CURRENT_PERIOD';\n","import {\n  SET_COVID_DATA,\n  SET_CURRENT_COUNTRY,\n  SET_CURRENT_INDEX,\n  SET_CURRENT_PERIOD,\n  SET_CURRENT_UNIT\n} from './types';\n\nexport const setCovidData = (data) => ({\n  type: SET_COVID_DATA,\n  payload: data\n});\n\nexport const setCurrentIndex = (index) => ({\n  type: SET_CURRENT_INDEX,\n  payload: index\n});\n\nexport const setCurrentUnit = (unit) => ({\n  type: SET_CURRENT_UNIT,\n  payload: unit\n});\n\nexport const setCurrentCountry = (country) => ({\n  type: SET_CURRENT_COUNTRY,\n  payload: country\n});\n\nexport const setCurrentPeriod = (period) => ({\n  type: SET_CURRENT_PERIOD,\n  payload: period\n});\n","import { useEffect, useState } from 'react';\n\nexport const useFullscreen = (ref) => {\n  const [target, setTarget] = useState(null);\n\n  useEffect(() => {\n    setTarget(ref?.current);\n  }, [ref]);\n\n  return target;\n};\n","import { config } from '../config';\n\nconst calculateTotal = (covidData, index) =>\n  covidData.reduce((total, data) => total + data[index], 0);\n\nexport const getCovidStats = ({\n  covidData,\n  countryData,\n  index,\n  period,\n  unit\n}) => {\n  const todayIndex = `today${index[0].toUpperCase() + index.slice(1)}`;\n  let result = 0;\n  if (period === config.period.total) {\n    result = countryData?.[index] ?? calculateTotal(covidData, index);\n  } else if (period === config.period.today) {\n    result = countryData?.[todayIndex] ?? calculateTotal(covidData, todayIndex);\n  } else {\n    throw new TypeError('Invalid period');\n  }\n  if (unit === config.unit.per100k) {\n    result = Math.round(\n      (result /\n        (countryData?.population ?? calculateTotal(covidData, 'population'))) *\n        100000\n    );\n  }\n  return result;\n};\n\nexport const calculateMarkerSize = ({\n  covidData,\n  index,\n  amount,\n  maxRate = 8,\n  ratesAmount = 15\n}) => {\n  const max = Math.max(...covidData.map((data) => data[index]));\n  for (let i = ratesAmount - 1; i > 0; --i) {\n    if (amount >= (i / ratesAmount) * max) {\n      return (maxRate * (i + 1)) / ratesAmount;\n    }\n  }\n  return (maxRate * 1) / ratesAmount;\n};\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { config } from '../../config';\nimport {\n  setCurrentIndex,\n  setCurrentPeriod,\n  setCurrentUnit\n} from '../../redux/actions/actions';\n\nexport const ControlPanel = ({ target, values }) => {\n  const dispatch = useDispatch();\n  const [index, setIndex] = useState(0);\n\n  useEffect(() => {\n    const action =\n      target === config.target.index\n        ? setCurrentIndex\n        : target === config.target.unit\n        ? setCurrentUnit\n        : target === config.target.period\n        ? setCurrentPeriod\n        : null;\n    if (!action) {\n      throw new TypeError('Invalid prop target');\n    }\n    dispatch(action(values[index]));\n  }, [dispatch, values, index, target]);\n\n  const handleClick = (direction) => {\n    const newIndex = index + direction;\n    const { length } = values;\n    setIndex(\n      newIndex < 0 ? (length + (newIndex % length)) % length : newIndex % length\n    );\n  };\n\n  return (\n    <div className='control-panel'>\n      <button className='control' onClick={() => handleClick(-1)}>\n        &#x25C1;\n      </button>\n      <span>{values[index]}</span>\n      <button className='control' onClick={() => handleClick(1)}>\n        &#x25B7;\n      </button>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport './fullscreen-button.css';\n\nexport const FullscreenButton = ({ target }) => {\n  const [fullscreen, setFullscreen] = useState(document.fullscreenElement);\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setFullscreen(document.fullscreenElement);\n      target.classList.toggle('fullscreen');\n    };\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, [target]);\n\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      target.requestFullscreen().catch((error) => console.log(error.message));\n    } else {\n      document.exitFullscreen().catch((error) => console.log(error.message));\n    }\n  };\n\n  return (\n    <button className='fullscreen-button' onClick={toggleFullscreen}>\n      {fullscreen ? (\n        <i className='fas fa-compress-arrows-alt' />\n      ) : (\n        <i className='fas fa-expand-arrows-alt' />\n      )}\n    </button>\n  );\n};\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport './search-bar.css';\n\nexport const SearchBar = ({ searchQuery, setSearchQuery }) => {\n  const [empty, setEmpty] = useState(true);\n\n  useEffect(() => {\n    setEmpty(!searchQuery);\n  }, [searchQuery]);\n\n  const handleQueryChange = (event) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleClearButtonClick = () => {\n    setSearchQuery('');\n  };\n\n  return (\n    <div className='search-bar'>\n      <input\n        className='search-field'\n        type='search'\n        placeholder='Search...'\n        value={searchQuery}\n        onChange={handleQueryChange}\n      />\n      {!empty && (\n        <button className='clear-button' onClick={handleClearButtonClick}>\n          &times;\n        </button>\n      )}\n    </div>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { config } from '../../config';\nimport { setCurrentCountry } from '../../redux/actions/actions';\nimport { useFullscreen } from '../../utils/custom-hooks';\nimport { getCovidStats } from '../../utils/helpers';\nimport { ControlPanel } from '../control-panel/control-panel';\nimport { FullscreenButton } from '../fullscreen-button/fullscreen-button';\nimport { SearchBar } from '../search-bar/search-bar';\nimport './list.css';\n\nexport const List = () => {\n  const covidData = useSelector((state) => state.covidData);\n  const index = useSelector((state) => state.currentIndex);\n  const unit = useSelector((state) => state.currentUnit);\n  const period = useSelector((state) => state.currentPeriod);\n  const dispatch = useDispatch();\n  const [active, setActive] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const listBlockRef = useRef(null);\n  const fullscreenTarget = useFullscreen(listBlockRef);\n\n  const handleItemClick = (countryObj) => {\n    dispatch(setCurrentCountry(countryObj));\n    setActive(countryObj.country);\n  };\n\n  const searchFilter =\n    (query) =>\n    ({ country }) =>\n      country.toLowerCase().search(query.toLowerCase()) > -1;\n\n  return (\n    <div className='block list' ref={listBlockRef}>\n      <FullscreenButton target={fullscreenTarget} />\n      <div className='controls'>\n        <ControlPanel\n          target={config.target.index}\n          values={[\n            config.index.cases,\n            config.index.deaths,\n            config.index.recovered\n          ]}\n        />\n        <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      </div>\n      <ul>\n        {covidData.filter(searchFilter(searchQuery)).map((countryObj) => (\n          <li\n            onClick={() => handleItemClick(countryObj)}\n            className={`list-item ${active === countryObj.country && 'active'}`}\n            key={countryObj.country + countryObj.countryInfo._id}\n          >\n            <div className='country'>\n              <img\n                src={countryObj.countryInfo.flag}\n                alt={countryObj.countryInfo.iso3}\n                className='country-flag'\n              />\n              <span className='country-name'>{countryObj.country}</span>\n            </div>\n            <div className={`amount ${index}`}>\n              {getCovidStats({\n                covidData,\n                countryData: countryObj,\n                index,\n                unit,\n                period\n              })}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport './table.css';\nimport { ControlPanel } from '../control-panel/control-panel';\nimport { config } from '../../config';\nimport { getCovidStats } from '../../utils/helpers';\nimport { useRef } from 'react';\nimport { useFullscreen } from '../../utils/custom-hooks';\nimport { FullscreenButton } from '../fullscreen-button/fullscreen-button';\n\nexport const Table = () => {\n  const covidData = useSelector((state) => state.covidData);\n  const countryData = useSelector((state) => state.currentCountry);\n  const period = useSelector((state) => state.currentPeriod);\n  const unit = useSelector((state) => state.currentUnit);\n  const tableBlockRef = useRef(null);\n  const fullscreenTarget = useFullscreen(tableBlockRef);\n\n  return (\n    <div className='block table' ref={tableBlockRef}>\n      <FullscreenButton target={fullscreenTarget} />\n      <ControlPanel\n        target={config.target.period}\n        values={[config.period.total, config.period.today]}\n      />\n      <table>\n        <thead>\n          <tr>\n            <th colSpan='2'>{countryData?.country ?? 'Global'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Cases</td>\n            <td>\n              {getCovidStats({\n                covidData,\n                countryData,\n                unit,\n                period,\n                index: config.index.cases\n              })}\n            </td>\n          </tr>\n          <tr>\n            <td>Deaths</td>\n            <td className='deaths'>\n              {getCovidStats({\n                covidData,\n                countryData,\n                unit,\n                period,\n                index: config.index.deaths\n              })}\n            </td>\n          </tr>\n          <tr>\n            <td>Recovered</td>\n            <td className='recovered'>\n              {getCovidStats({\n                covidData,\n                countryData,\n                unit,\n                period,\n                index: config.index.recovered\n              })}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <ControlPanel\n        target={config.target.unit}\n        values={[config.unit.absolute, config.unit.per100k]}\n      />\n    </div>\n  );\n};\n","import 'leaflet/dist/leaflet.css';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\nimport { useSelector } from 'react-redux';\nimport { useEffect, useRef, useCallback } from 'react';\nimport './map.css';\nimport { config } from '../../config';\nimport { calculateMarkerSize } from '../../utils/helpers';\nimport { useState } from 'react';\nimport { useFullscreen } from '../../utils/custom-hooks';\nimport { FullscreenButton } from '../fullscreen-button/fullscreen-button';\n\nexport const Map = () => {\n  const covidData = useSelector((state) => state.covidData);\n  const mapRef = useRef(null);\n  const index = useSelector((state) => state.currentIndex);\n  const currentCountry = useSelector((state) => state.currentCountry);\n  const [center, setCenter] = useState([0, 0]);\n  const [zoomIn, setZoomIn] = useState(false);\n  const mapBlockRef = useRef(null);\n  const fullscreenTarget = useFullscreen(mapBlockRef);\n\n  useEffect(() => {\n    const { lat = 0, long = 0 } = currentCountry?.countryInfo ?? {};\n    setCenter([lat, long]);\n    setZoomIn(!!currentCountry);\n  }, [currentCountry]);\n\n  const pointToLayer = useCallback(\n    (feature, latlng) => {\n      const { properties } = feature;\n      const { country, updated, cases, deaths, recovered } = properties;\n      const markerSize = calculateMarkerSize({\n        covidData,\n        index,\n        amount: properties[index]\n      });\n\n      const html = `\n      <span class='icon-marker ${index}' style=\"width: ${markerSize}rem; height: ${markerSize}rem;\">\n        <span class='icon-marker-tooltip'>\n          <h5>${country}</h5>\n          <ul>\n            <li>\n              <strong>Confirmed: </strong>\n              <span class='cases'>${cases}</span>\n            </li>\n            <li>\n              <strong>Deaths: </strong>\n              <span class='deaths'>${deaths}</span>\n            </li>\n            <li>\n              <strong>Recovered: </strong>\n              <span class='recovered'>${recovered}</span>\n            </li>\n            <li>\n              <strong>Last update: </strong>\n              <span>${new Date(updated).toLocaleString()}</span>\n            </li>\n          </ul>\n        </span>\n      </span>\n    `;\n\n      return L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'icon',\n          html\n        }),\n        riseOnHover: true\n      });\n    },\n    [index, covidData]\n  );\n\n  useEffect(() => {\n    const { leafletElement: map } = mapRef.current;\n    const features = covidData.map((data) => {\n      const { lat, long } = data.countryInfo;\n      return {\n        type: 'Feature',\n        properties: {\n          ...data\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [long, lat]\n        }\n      };\n    });\n    const geoJsonObject = { type: 'FeatureCollection', features };\n    const geoJson = new L.GeoJSON(geoJsonObject, { pointToLayer }).addTo(map);\n\n    return () => {\n      geoJson.removeFrom(map);\n    };\n  }, [covidData, pointToLayer]);\n\n  return (\n    <div className='block map' ref={mapBlockRef}>\n      <FullscreenButton target={fullscreenTarget} />\n      <LeafletMap\n        ref={mapRef}\n        className='map-container'\n        center={center}\n        zoom={zoomIn ? 8 : 3}\n        scrollWheelZoom={true}\n      >\n        <TileLayer url={config.mapTileLayerUrl} />\n      </LeafletMap>\n    </div>\n  );\n};\n","import { Chart as ChartJS, Doughnut } from 'react-chartjs-2';\nimport { useSelector } from 'react-redux';\nimport './chart.css';\nimport { getCovidStats } from '../../utils/helpers';\nimport { config } from '../../config';\nimport { useRef } from 'react';\nimport { useFullscreen } from '../../utils/custom-hooks';\nimport { FullscreenButton } from '../fullscreen-button/fullscreen-button';\n\nChartJS.defaults.color = getComputedStyle(\n  document.documentElement\n).getPropertyValue('--text-color-light');\nChartJS.defaults.borderColor = '#b3dee210';\n\nexport const Chart = () => {\n  const covidData = useSelector((state) => state.covidData);\n  const currentCountry = useSelector((state) => state.currentCountry);\n  const chartBlockRef = useRef(null);\n  const fullscreenTarget = useFullscreen(chartBlockRef);\n\n  return (\n    <div className='block chart' ref={chartBlockRef}>\n      <FullscreenButton target={fullscreenTarget} />\n      <div className='chart-container'>\n        <Doughnut\n          data={{\n            labels: ['Cases', 'Deaths', 'Recovered'],\n            datasets: [\n              {\n                data: [\n                  getCovidStats({\n                    covidData,\n                    countryData: currentCountry,\n                    index: config.index.cases,\n                    period: config.period.total,\n                    unit: config.unit.absolute\n                  }),\n                  getCovidStats({\n                    covidData,\n                    countryData: currentCountry,\n                    index: config.index.deaths,\n                    period: config.period.total,\n                    unit: config.unit.absolute\n                  }),\n                  getCovidStats({\n                    covidData,\n                    countryData: currentCountry,\n                    index: config.index.recovered,\n                    period: config.period.total,\n                    unit: config.unit.absolute\n                  })\n                ],\n                backgroundColor: [\n                  'rgba(54, 162, 235, 0.2)',\n                  'rgba(255, 99, 132, 0.2)',\n                  'rgba(75, 192, 192, 0.2)'\n                ],\n                borderColor: [\n                  getComputedStyle(document.documentElement).getPropertyValue(\n                    '--text-color-light'\n                  ),\n                  getComputedStyle(document.documentElement).getPropertyValue(\n                    '--text-color-danger'\n                  ),\n                  getComputedStyle(document.documentElement).getPropertyValue(\n                    '--text-color-success'\n                  )\n                ],\n                borderWidth: 1\n              }\n            ]\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","import './spinner.css';\n\nexport const Spinner = () => {\n  return (\n    <div className='spinner'>\n      <div className='loadingio-spinner-rolling-tgnvbc7dmop'>\n        <div className='ldio-gb52ke7jo7'>\n          <div />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { Layout } from '../layout/layout';\nimport { List } from '../list/list';\nimport { Table } from '../table/table';\nimport { Map } from '../map/map';\nimport { Chart } from '../chart/chart';\nimport { setCovidData } from '../../redux/actions/actions';\nimport { config } from '../../config';\nimport { Spinner } from '../spinner/spinner';\n\nexport const App = () => {\n  const [loaded, setLoaded] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(config.apiUrl);\n      return await response.data;\n    };\n    fetchData().then((data) => {\n      dispatch(setCovidData(data));\n      setLoaded(true);\n    });\n  }, [dispatch]);\n\n  if (!loaded) {\n    return <Spinner />;\n  }\n\n  return (\n    <Layout\n      listContent={<List />}\n      mapContent={<Map />}\n      tableContent={<Table />}\n      chartContent={<Chart />}\n    />\n  );\n};\n","import { config } from '../../config';\nimport {\n  SET_COVID_DATA,\n  SET_CURRENT_COUNTRY,\n  SET_CURRENT_INDEX,\n  SET_CURRENT_PERIOD,\n  SET_CURRENT_UNIT\n} from '../actions/types';\n\nconst initialState = {\n  covidData: [],\n  currentIndex: config.index.cases,\n  currentUnit: config.unit.absolute,\n  currentPeriod: config.period.total,\n  currentCountry: null\n};\n\nexport const rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_COVID_DATA:\n      return { ...state, covidData: action.payload };\n    case SET_CURRENT_INDEX:\n      return { ...state, currentIndex: action.payload };\n    case SET_CURRENT_UNIT:\n      return { ...state, currentUnit: action.payload };\n    case SET_CURRENT_COUNTRY:\n      return { ...state, currentCountry: action.payload };\n    case SET_CURRENT_PERIOD:\n      return { ...state, currentPeriod: action.payload };\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducers/root-reducer';\n\nexport const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from './components/app/app';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}